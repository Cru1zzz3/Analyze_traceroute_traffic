#include <iostream>
#include <string>
#include <vector>
#include <fstream>

#include <pcap/pcap.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

void list_devices(std::vector<pcap_if_t*> &devices){

    pcap_if_t* device;
    char errbuf[PCAP_ERRBUF_SIZE];
    int errcode;
    errcode = pcap_findalldevs(&device,errbuf);
    if (errcode == 0){
        while (device){
            devices.push_back(device);
            std::cout << "Name of device: " << device-> name << std::endl;
            std::cout << "Adresses of device: " << device -> addresses << std::endl;
            if (device -> description)
                std::cout << "Description of device: " << device -> description << std::endl << std::endl;
            else std::cout << "Device have not described" << std::endl << std::endl;

            device = device->next;
        }
    }
    else {
        std::cout << "Devices not found. Error code: " <<  errcode << std::endl;
    }
    pcap_freealldevs(device);
}

void callback(u_char *args,const struct pcap_pkthdr *packetheader,const u_char* packet){
    static int count = 1;
    std::cout << count << std::endl;
    count++;
}
/*
void callback(pcap_t* p,struct pcap_pkthdr *pkt_header, const u_char *packet){
    packet = pcap_next(p,pkt_header);
    //pkt_header[this]->caplen;
    //pkt_data;
    std::cout << "Packet data: " << packet << std::endl;
}
*/
int main(int argc, char* argv[]) {
    char* namedevice;
    char errbuf[PCAP_ERRBUF_SIZE];
    int errcode;io:

    FILE *file;
    file = fopen("out_log.pcap","w");

    //argc = 1;
    //argv [1];
    pcap_t* p;
    std::vector<pcap_if_t*> devices;
    std::vector<std::string> command;
    command.push_back("XXX");

    int i = 1;
    while (argv[i]) {
        //std::cout << argv[i]<< std::endl;
        command.push_back(argv[i]);
        //std::cout << command[i]<< std::endl;
        i++;
    }
   // if (command[1] == "list"){
        list_devices(devices);
   // }

    //char* device = devices[0];
    const int snaplen = 65536;
    //errcode = pcap_set_snaplen(p,snaplen);
    //errcode = pcap_set_promisc(p,1);

     p = pcap_open_live(devices[0]->name,snaplen,1,1,errbuf);
     //file = pcap_file(p);

     struct pcap_pkthdr *packetheader;
     //struct pcap_pkthdr **pkt_header;
     //const u_char  **pkt_data;

     //errcode = pcap_next_ex(p,pkt_header,pkt_data);

     //f = fwrite(p,,count,file)
     u_char *user;
     int count;
     pcap_loop(p,-1,callback,NULL);

     //file.close();
    return 0;
}