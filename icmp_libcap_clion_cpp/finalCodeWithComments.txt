#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <pcap/pcap.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ether.h>
#include <netinet/if_ether.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <netinet/udp.h>
#include <net/ethernet.h>
#include <arpa/inet.h>
#include <sys/time.h>
#include <stdio.h>
#include <stdlib.h>
#include <pcap.h>
#include <arpa/inet.h>
#include <net/ethernet.h>
#include <string.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/ip_icmp.h>

struct deviceDescription {
    char *name;
    in_addr device_ip;
};

struct udpPacketsStruct {
    //in_addr ip_src;
    //in_addr ip_dst;
    u_int16_t source_port;      // ntohs(udp->uh_sport);
    u_int16_t destination_port; // ntohs(udp->uh_dport);
    timeval timeStart;
    timeval timeFinish;
    timeval ping;
    uint64_t ms;
};

struct icmpPacketsStruct {
    in_addr icmp_src;
    u_int icmp_count = 0;
    bool delivired;
    std::vector<udpPacketsStruct> udp_inner;
    timeval ping;
};

u_int portUnreachCount = 0;
pcap_t *p;
std::vector<deviceDescription> devices;

in_addr target_ip;
std::vector<icmpPacketsStruct> icmp_packets;
std::vector<udpPacketsStruct> udp_packets;

std::vector<icmpPacketsStruct> adresses;

void callback(u_char *user, const struct pcap_pkthdr *hdr, const u_char *packet) {
    static int count = 0;

    struct tm *ltime;
    char timestr[16];
    time_t local_tv_sec;

    local_tv_sec = hdr->ts.tv_sec;
    ltime = localtime(&local_tv_sec);
    strftime(timestr, sizeof timestr, "%H:%M:%S", ltime);
    //std::cout << "Time " << timestr << std::endl;
    char *endTime = timestr;

    //std::cout << "Packet " << count << std::endl;
    //printf("\tTime: %s.%.6d\n", timestr, hdr->ts.tv_usec);


    /*
    // Ethernet header //
    #define ETHER_ADDR_LEN	6 // Ethernet addresses are 6 bytes

    struct sniff_ethernet {
        u_char ether_dhost[ETHER_ADDR_LEN]; // Destination host address
        u_char ether_shost[ETHER_ADDR_LEN]; // Source host address
        u_short ether_type; // IP? ARP? RARP? etc
    };

    // IP header //

    struct sniff_ip {
        u_char ip_ttl;		// time to live
        u_char ip_p;		// protocol
        struct in_addr ip_src,ip_dst; // source and dest address
    };
#define IP_HL(ip)		(((ip)->ip_vhl) & 0x0f)
#define IP_V(ip)		(((ip)->ip_vhl) >> 4)

    // TCP header //
    typedef u_int tcp_seq;
    struct sniff_tcp {
        u_short th_sport;	// source port
        u_short th_dport;	// destination port
        tcp_seq th_seq;		// sequence number
        tcp_seq th_ack;		// acknowledgement
    };
    */


#define SIZE_ETHERNET 14 // ethernet headers are always exactly 14 bytes

    const struct ethernet *ethernet;
    const struct ip *ip;
    const struct icmp *icmp;
    const struct udphdr *udp;
    const struct tcphdr *tcp;
    //const char *payload; /* Packet payload */


//And now we do our magical typecasting:

    ethernet = (struct ethernet *) (packet);
    ip = (struct ip *) (packet + SIZE_ETHERNET);


    if (ip->ip_dst.s_addr == target_ip.s_addr) {
        std::cout << std::endl;
        count++;
        std::cout << "Packet " << count << std::endl;

        //std::cout << "struct pole dst packet ip\t" << ip->ip_dst.s_addr << std::endl;
        //std::cout << "struct pole dst target ip\t" << target_ip.s_addr << std::endl;

        std::cout << "Packet ip src\t" << inet_ntoa(ip->ip_src) << std::endl;
        std::cout << "Packet ip dst\t" << inet_ntoa(ip->ip_dst) << std::endl;
        std::cout << "Packet ip ttl\t" << (u_int) ip->ip_ttl << std::endl;
        //std::cout << "Target ip\t\t" << inet_ntoa(target_ip) << std::endl;
        //std::cout << "Equal" << std::endl;


        if ((u_int) ip->ip_p == 6) {
            std::cout << "IP protocol contains TCP protocol" << std::endl;
            tcp = (struct tcphdr *) (packet + SIZE_ETHERNET + sizeof(struct ip));


        } else if ((u_int) ip->ip_p == 17) {
            std::cout << "IP protocol contains UDP protocol" << std::endl;
            udp = (struct udphdr *) (packet + SIZE_ETHERNET + sizeof(struct ip));

            udpPacketsStruct udp_packet;

            udp_packet.source_port = ntohs(udp->uh_sport);
            udp_packet.destination_port = ntohs(udp->uh_dport);

            udp_packet.timeStart = hdr->ts;

            udp_packets.push_back(udp_packet);


            //u_int16_t len = ntohs(udp->uh_ulen);
            //u_int16_t checksum = ntohs(udp->uh_sum);

            //print
            std::cout << "Protocol:\t\t\tUDP" << std::endl;
            std::cout << "Source port:\t\t" << udp_packet.source_port << std::endl;
            std::cout << "Destination port:\t" << udp_packet.destination_port << std::endl;


        }
        pcap_dump(user, hdr, packet);
    } else if (((u_int) ip->ip_p == 1)) {
        std::cout << std::endl;
        count++;
        std::cout << "Packet " << count << std::endl;

        std::cout << "Packet ip src\t" << inet_ntoa(ip->ip_src) << std::endl;
        std::cout << "Packet ip dst\t" << inet_ntoa(ip->ip_dst) << std::endl;

        //std::cout << "Device ip\t\t" << inet_ntoa(device_ip) << std::endl;
        //if (inet_ntoa(ip->ip_dst) == inet_ntoa(device_ip))
        //std::cout << "Equal" << std::endl;
        std::cout << "IP protocol contains ICMP protocol" << std::endl;

        icmp = (struct icmp *) (packet + SIZE_ETHERNET + sizeof(struct ip));
        static char *type_name[] = {
                "Echo Reply",               // Type  0
                "Undefine",                 // Type  1
                "Undefine",                 // Type  2
                "Destination Unreachable",  // Type  3
                "Source Quench",            // Type  4
                "Redirect (change route)",  // Type  5
                "Undefine",                 // Type  6
                "Undefine",                 // Type  7
                "Echo Request",             // Type  8
                "Undefine",                 // Type  9
                "Undefine",                 // Type 10
                "Time Exceeded",            // Type 11
                "Parameter Problem",        // Type 12
                "Timestamp Request",        // Type 13
                "Timestamp Reply",          // Type 14
                "Information Request",      // Type 15
                "Information Reply",        // Type 16
                "Address Mask Request",     // Type 17
                "Address Mask Reply",       // Type 18
                "Unknown"                   // Type 19
        }; //icmp type


        u_char type = icmp->icmp_type;
        u_char code = icmp->icmp_code;

        std::cout << "Type: " << type_name[type] << std::endl;
        std::cout << "Code: " << (u_int) code << std::endl;


#define ICMP_TYPE_MAX (sizeof type_name / sizeof type_name[0])

        if (type < 0 || ICMP_TYPE_MAX <= type)
            type = ICMP_TYPE_MAX - 1;


        if (type == ICMP_ECHOREPLY || type == ICMP_ECHO) {


        } else if (type == ICMP_UNREACH) {
            portUnreachCount++;
            if (portUnreachCount == 3)
                pcap_breakloop(p);
            /*
             * bool complete = true;
             for (int i = 0; i < icmp_packets.size(); i++) {
                 if (!icmp_packets[i].delivired) {
                     complete = false;
                     break;
                 }
             }
             if (complete)

                 */

            if (code == ICMP_UNREACH_NEEDFRAG) {

            }
        } else if (type == ICMP_REDIRECT) {

        } else if (type == ICMP_TIMXCEED) {

        }

        //if the icmp packet carry ip header

        if (type == ICMP_TIMXCEED || type == ICMP_UNREACH) {
            struct ip *ip_inner = (struct ip *) icmp->icmp_data;

            u_char inner_ttl = ip_inner->ip_ttl;
            u_char protocol = ip_inner->ip_p;

            std::cout << "Packet inner ip src\t" << inet_ntoa(ip_inner->ip_src) << std::endl;
            std::cout << "Packet inner ip dst\t" << inet_ntoa(ip_inner->ip_dst) << std::endl;

            in_addr current_ip;
            current_ip = ip->ip_src;

            if (protocol == IPPROTO_ICMP) {

            };


            if (protocol == IPPROTO_UDP) {

                udp = (struct udphdr *) ((icmp->icmp_data) + sizeof(struct ip));

                udpPacketsStruct udp_packet;

                udp_packet.source_port = ntohs(udp->uh_sport);
                udp_packet.destination_port = ntohs(udp->uh_dport);


                std::cout << "Protocol:\t\t\tUDP in ICMP" << std::endl;
                std::cout << "Source port:\t\t" << udp_packet.source_port << std::endl;
                std::cout << "Destination port:\t" << udp_packet.destination_port << std::endl;


                for (int i = 0; i < udp_packets.size(); i++) {
                    if (udp_packet.destination_port == udp_packets[i].destination_port) {

                        udp_packets[i].timeFinish = hdr->ts;

                        udp_packets[i].ping.tv_sec = udp_packets[i].timeFinish.tv_sec - udp_packets[i].timeStart.tv_sec;
                        udp_packets[i].ping.tv_usec =
                                udp_packets[i].timeFinish.tv_usec - udp_packets[i].timeStart.tv_usec;

                        udp_packets[i].ms =
                                (udp_packets[i].ping.tv_sec * (uint64_t) 1000) + (udp_packets[i].ping.tv_usec / 1000);

                        udp_packet = udp_packets[i];

                        break;
                    }
                }

                //print

                icmpPacketsStruct icmp_packet;

                if (icmp_packets.empty()) {
                    icmp_packet.icmp_src = current_ip;
                    icmp_packet.icmp_count++;
                    icmp_packet.udp_inner.push_back(udp_packet);
                    icmp_packets.push_back(icmp_packet);
                } else {
                    bool duplicate = false;
                    for (int i = 0; i < icmp_packets.size(); i++) {
                        if (current_ip.s_addr == icmp_packets[i].icmp_src.s_addr) {
                            duplicate = true;

                            icmp_packets[i].udp_inner.push_back(udp_packet);

                            icmp_packets[i].icmp_count++;
                            /*
                            if (icmp_packets[i].icmp_count == 2) {
                                icmp_packets[i].delivired = true;
                                adresses.push_back(icmp_packets[i]);
                            }
                             */
                            break;
                        }
                    }
                    if (!duplicate) {
                        icmp_packet.icmp_src = current_ip;
                        icmp_packet.icmp_count++;
                        icmp_packet.udp_inner.push_back(udp_packet);
                        icmp_packets.push_back(icmp_packet);
                    }
                }

            }

            if (protocol == IPPROTO_TCP) {

            };


        }//end if
        pcap_dump(user, hdr, packet);
    }

    //out.close();
    //pcap_breakloop(p);
}

void list_devices(bool cout) {
    pcap_if *device;
    char errbuf[PCAP_ERRBUF_SIZE];
    int errcode;

    char *null_addr_string = "0.0.0.0";
    in_addr null_addr;
    inet_aton(null_addr_string, &null_addr);

    errcode = pcap_findalldevs(&device, errbuf);
    if (errcode == 0) {
        while (device) {

            deviceDescription currentDevice;
            in_addr device_ip;

            currentDevice.name = device->name;
            if (cout)
                std::cout << "Name of device: " << currentDevice.name << std::endl;

            if (device->addresses && device->addresses->next) {
                sockaddr_in *device_addr = ((struct sockaddr_in *) device->addresses->next->addr);
                device_ip = device_addr->sin_addr;

                currentDevice.device_ip = device_ip;
                if (cout)
                    std::cout << "IP address of device: " << inet_ntoa(device_ip) << std::endl;
            } else {
                currentDevice.device_ip = null_addr;
                if (cout)
                    std::cout << "IP address of device is NULL" << std::endl;
            }
            if (device->description) {
                if (cout)
                    std::cout << "Description of device: " << device->description << std::endl << std::endl;
            } else {
                if (cout)
                    std::cout << "Device have not described" << std::endl << std::endl;
            }


            devices.push_back(currentDevice);


            device = device->next;
        }
    } else {
        std::cout << "Devices not found. Error code: " << errcode << std::endl;
    }
    pcap_freealldevs(device);

}

int main(int argc, char *argv[]) {

    char errbuf[PCAP_ERRBUF_SIZE];
    int errcode;

    std::vector<char *> command;
    //command.push_back(argv[0]);

    //argv[1] = "list";


    //argc = 4;
    //argv[1] = "wlp3s0";
    //argv[2] = " ";
    //argv[3] = "5.255.255.55";

    int i = 1;
    while (i < argc) {
        if (argv[i] != " ")
            command.push_back(argv[i]);
        i++;
    }

    /*
    i = 0;
    while (argv[i]) {
        std::cout << argv[i] << std::endl;
        i++;
    }
    std::cout << argc << std::endl;
    */

    //std::cout<< argv[1] << std::endl;

    bool cout = false;

    if (strcmp(command[0], "list") == 0)
        cout = true;

    list_devices(cout);

    if (!cout) {
        deviceDescription currentDevice;
        bool find = false;
        for (i = 0; i < devices.size(); i++) {
            if (strcmp(devices[i].name, command[0]) == 0) {
                find = true;
                currentDevice.name = devices[i].name;
                currentDevice.device_ip = devices[i].device_ip;
                break;
            }
        }

        if (find) {
            std::cout << "Device " << currentDevice.name << " is preparing..." << std::endl;
            if (inet_aton(command[1], &target_ip) == 0)
                std::cout << "Invalid address" << std::endl;

            else {
                //std::cout << inet_ntoa(target_ip) << std::endl;

                const char *device;
                const char *errDescr;
                device = currentDevice.name;
                p = pcap_create(device, errbuf);

                const int snaplen = 65536;
                errcode = pcap_set_snaplen(p, snaplen);
                errcode = pcap_set_promisc(p, 1);

                errcode = pcap_activate(p);
                if (errcode != 0) {
                    errDescr = pcap_statustostr(errcode);
                    std::cout << "pcap_activate error! ";
                    std::cout << errDescr << std::endl;
                } else std::cout << "Capturing started..." << std::endl;


                char *error;

                const char *filename = "traceroute.pcap";
                pcap_dumper_t *fileDumper;
                fileDumper = pcap_dump_open(p, filename);
                if (fileDumper == NULL)
                    error = pcap_geterr(p);

                /*
                bpf_program *bpf;
                const char *filter = "udp or icmp";
                int compileOptimize = 0;
                bpf_u_int32 netmask;
                pcap_compile(p, bpf, filter, compileOptimize, netmask);
                pcap_setfilter(p, bpf);
                */

                int cnt = -1; //infinity
                errcode = pcap_loop(p, cnt, callback, (u_char *) fileDumper);
                if (errcode != 0) {
                    errDescr = pcap_statustostr(errcode);
                    std::cout << "capturing ended! " << std::endl;
                    std::cout << errDescr << std::endl;
                } else std::cout << "capturing ended" << std::endl;

                pcap_dump_close(fileDumper);


                std::fstream out;
                out.open("mytraceroute_hops.txt", std::ios_base::out);

                int count = 0;

                /*
                for (i = 0; i < adresses.size(); i++) {
                    count++;
                    std::cout << count << "\t";
                    out << count << "\t";
                    std::cout << inet_ntoa(adresses[i].icmp_src) << "\t\t";
                    out << inet_ntoa(adresses[i].icmp_src) << "\t\t";
                    for (int j = 0;j < adresses[i].udp_inner.size();j++){
                        std::cout << adresses[i].udp_inner[j].ms << " ms\t";
                        out << adresses[i].udp_inner[j].ms << " ms\t";
                    }
                    std::cout << std::endl;
                }
                */

                for (i = 0; i < icmp_packets.size(); i++) {
                    count++;
                    std::cout << count << "\t";
                    out << count << "\t";
                    std::cout << inet_ntoa(icmp_packets[i].icmp_src) << "\t\t";
                    out << inet_ntoa(icmp_packets[i].icmp_src) << "\t\t";
                    for (int j = 0; j < icmp_packets[i].udp_inner.size(); j++) {
                        std::cout << icmp_packets[i].udp_inner[j].ms << " ms\t";
                        out << icmp_packets[i].udp_inner[j].ms << " ms\t";
                    }
                    std::cout << std::endl;
                }

                out.close();
            }
        } else std::cout << "Device " << command[0] << " not in devices" << std::endl;

    }

    return 0;
}

